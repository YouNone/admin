import { Injectable } from '@angular/core';

/**
 * Сервис сообщений фронта. Содержит массив сообщений и заголовков окон уведомлений.
 * Ключи индексов начинаются с соответствующей буквы:
 * e -- Ошибка
 * w -- Предупреждение
 * i -- Информация
 * 
 * @export
 * @class MsgList
 */
@Injectable()
export class MsgList {

	/** Массив сообщений */
	private msg = {

		success: 'Операция прошла успешно',
		info: 'Для информации',
		warning: 'Внимание!',
		error: 'Ошибка!',
		close: 'Закрыть',
		btnOk: 'Ок',
		weekday: 'Воскесенье Понедельник Вторник Среда Четверг Пятница Суббота',
		caution: 'Предупреждение',
		
		// Авторизация и общие сообщения
		eReadAppSettings:				'Ошибка чтения настроек приложения. Будут задействованы дефолтные настройки. ',
		credentialNotFoung:				'Пользователь с указанными данными не найден. Возможно неправильно введен логин или пароль. Повторите попытку.',
		justRegister:					'Вы успешно зарегистрировались в системе. Теперь можно войти, используя введенные данные.',
		accessDenide:					'Вход на портал разрешен только для авторизованных пользователей. Для входа в систему введите, пожалуйста, логин и пароль.',
		accessDenideAdmin:				'Вход а админ панель разрешен только для авторизованных пользователей. Для входа в систему введите, пожалуйста, логин и пароль. В случае, если у вас не хватает прав для входа в админ панель, обратитесь к администратору сервиса.',
		
		eFieldToShort:					'Текст слишком короткий',
		eFieldRequired:					'Поле обязательно для заполнения',
		eFieldNotChanged:				'Форма не содержит изменений',
		eFieldFill:						'Ошибка заполнения поля',

		// Универсальный компонент чтения данных

		eReadItemsList: 				'Ошибка чтения списка. ',
		eDeleteItem:					'Ошибка удаления записи. ID записи ',
		eDeleteNoIdItem:				'Ошибка удаления записи. запись без ID',
		eReadItem:						'Ошибка чтения информации о записи с ID = ',
		eCreateItem:					'Ошибка создания записи. ',
		eUpdateItem:					'Ошибка сохранения записи с ID = ',
		eUpdateItemList:				'Ошибка обновления списка записей: ',
		eEmptyField: 					'Поле не может быть пустым',
		eCanNotBeWhiteSpace:			'Минимальное количество значащих символов: {0}. Введено {1}',
		eNoChangeField: 				'Внесите изменения перед отправкой формы',
		wFormWasChanged:				'Ваша форма содержит несохраненные данные, уйти со страницы?',

		// Универсальные сообщения редактирования компонентов
		eBadData:						'Неверные данные. Операция не может быть выполнена. ',
		eBadFormat:						'Неверный формат данных. ',
		eBadEnumFormat:					'Неверный формат данных перечислимого типа. В ключах перечислимого типа допустимы имена из латинских букв, цифр, -, _, разделенных запятыми или пробелами.',
		eSaveRecord:					'Данные не сохранены. Корректно заполните отмеченные красным цветом поля',
		mRecordSuccessEdit:				'Данные успешно отредактированы',
		mRecordSuccessAdd:				'Данные успешно сохранены',
		mConfirmRecordDelete:			'Вы действительно желаете удалить данную запись?',
		mRecordDeleted:					'Запись удалена',
		mShortRecordText: 				'Слишком короткий текст',
		wchildListNotEmpty:				'Список подчиненных элементов не пуст. Операция невозможна. ',
		mNotFound:						'Ничего не найдено. Введите новый текст и повторите попытку.',
		mEmptyBox: 						'Список пуст. Введите любой из фрагментов названия, кода и нажмите клавишу ВВОД или знак',

	}

	/**
	 * Возвращает сообщение с указанным ключом.
	 *
	 * @param {string} key -- ключ сообщения. Например: eTooManyBoolets
	 * @returns {string} -- текст сообщения.
	 * @memberof MsgListFront
	 */
	public getMsg(key: string): string {
		return this.msg[key];
	}


	/**
	 * Возвращает форматированную строку с сообщением. На вход принимает строку формата:
	 * 'Text text {0} text text text {1} text text text {arg_num} text.', в которой заменяет 
	 * вхождения шаблонов типа {num} на соответствующий по порядку аргументом вызова функции.
	 *
	 * @param {string} key
	 * @param {...any[]} args
	 * @returns {string}
	 * @memberof MsgListFront
	 */
	public getMsgFormat(key: string, ...args: any[]): string{
		let res: string = this.msg[key];
		for(let count = 1; count < arguments.length; count++){
			let reg = RegExp('\\{' + (count-1) + '\\}', 'gi');
			res = res.replace(reg, arguments[count]);
		}
		return res;
	}
}
